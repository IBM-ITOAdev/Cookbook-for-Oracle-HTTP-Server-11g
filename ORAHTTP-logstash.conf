####################################################################
# Sample Logstash v1.5.x Configuration for Oracle HTTP Server 11g
#
# Web: http://www.oracle.com/technetwork/middleware/webtier/overview/index.html#OHS
# Community: http://www.oracle.com/technetwork/middleware/webtier/community/index.html
# Docs: http://www.oracle.com/technetwork/middleware/webtier/documentation/index.html#OHS
# Log Info: https://docs.oracle.com/middleware/11119/webtier/administer-ohs/man_logs.htm#HSADM218
#
####################################################################
# v1.0 Doug McClure 9/23/15 Oracle HTTP Server 11g - access log and error log
#
####################################################################

input {

#############################################################################################
#Oracle HTTP Server Logs
#############################################################################################

#file inputs used as I was provided sample logfiles. In a live streaming environment other inputs like TCP would be used here.

	#access_log, access_log.timestamp
	file {
		path => "/opt/scala/driver/Logstash/ORACLE-HTTP/oracle_http_server_logs/foobar1/access_log*"
		#this forces the entire logfile to be read from beginning. Creates tracking state file in $HOME directory as .sincedb.... (delete to reprocess log)
		start_position => "beginning"
		type => "ORACLE-HTTP"
		tags => ["access_log"]
	} #end file
	
	#foobar1.log, foobar1-timestamp.log
	file {
		path => "/opt/scala/driver/Logstash/ORACLE-HTTP/oracle_http_server_logs/foobar1/foobar1*"
		#this forces the entire logfile to be read from beginning. Creates tracking state file in $HOME directory as .sincedb.... (delete to reprocess log)
		start_position => "beginning"
		type => "ORACLE-HTTP"
		tags => ["error_log"]
	}
	
##########################################################################

} #end input

##########################################################################

filter {

#common stuff for all logs

#copy orig filepath to new fields

	mutate {
		add_field => { "origFilePath" => "%{path}" }
		add_tag => [ "origFilePathCreated" ]
	} #end mutate

#parse hostname and logfile name from new filepath field and create new hostname and logfile fields
#add add' patterns for other directories as needed

	grok {
		match => {"origFilePath" => "oracle_http_server_logs/%{DATA:hostname}/%{GREEDYDATA:logfile}"}
		add_tag => [ "hostnameLogfileCreated" ]
	} #end grok
	
############################################################
# Oracle HTTP
############################################################
	
if [type] == "ORACLE-HTTP" and "hostnameLogfileCreated" in [tags] {

	if "error_log" in [tags] {
		
		# a lot of blank lines in some of these logs
		
		if [message] == "" {drop{}}
		
		#extract useful fields based on patterns seen in sample logs provided
		
		grok {
			match => {"message" => "%{ORAHTTPERR}"}
			match => {"message" => "%{ORAHTTPERR2}"}
			patterns_dir => ["/opt/scala/driver/Logstash/logstash-1.5.3/patterns"]
			add_tag => [ "ORACLE-HTTP-error_log-Grokked" ]
		} #end grok
		
		#normalize date format to ISO8601
		#2015-09-22T12:01:56.0031-07:00
		
		date {
			match => [ "origTimestamp", "ISO8601" ]
			target => "@timestamp"
			add_tag => [ "timestamp-fixed" ]
		} #end date
		
		#set the host/path value for the LA datasource.  This is set for consolidation of all logs to functional datasources in LA.
		
		mutate {
			#replace => [ "host", "%{hostname}", "path", "%{type}-error_log" ]
			replace => [ "host", "error_log", "path", "%{type}" ]
			add_tag => [ "ORACLE-HTTP-Final" ]
		} #end mutate
		
	} #end error_log conditional
	
	if "access_log" in [tags] {
	
		#extract useful fields based on patterns seen in sample logs provided
		
		grok {
			match => {"message" => "%{ORAHTTPACCESS}"}
			patterns_dir => ["/opt/scala/driver/Logstash/logstash-1.5.3/patterns"]
			add_tag => [ "ORACLE-HTTP-access_log-Grokked" ]
		} #end grok
		
		#fix sessions where bytes is '-' so we don't get a datatype error in LA
		
		if [bytes] == "-" {
			mutate {
				replace => { "bytes" => "0" }
			} #end mutate
		} #end conditional
		
		#normalize date format to ISO8601
		#22/Sep/2015:05:00:04 -0700
		
		date {
			match => [ "origTimestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
			target => "@timestamp"
			add_tag => [ "timestamp-fixed" ]
		} #end date
		
		#set the host/path value for the LA datasource.  This is set for consolidation of all logs to functional datasources in LA.
		
		mutate {
			#replace => [ "host", "%{hostname}", "path", "%{type}-access_log" ]
			replace => [ "host", "access_log", "path", "%{type}" ]
			add_tag => [ "ORACLE-HTTP-Final" ]
		} #end mutate
		
	} #end access_log conditional
	
} #end ORACLE-HTTP conditional

##########################################################################

} #end filter

##########################################################################

output {

if "ORACLE-HTTP-Final" in [tags] {
	
	scala {
		scala_url => "https://10.0.0.1:9987/Unity/DataCollector"
		scala_user => "unityadmin"
		scala_password => "unityadmin"
		scala_keystore_path => ""
		batch_size => 500000
		idle_flush_time => 5
		sequential_flush => true
		num_concurrent_writers => 20
		use_structured_api => false
		disk_cache_path => "/opt/scala/driver/Logstash/cache-dir"
		scala_fields =>
		  {
			"error_log@ORACLE-HTTP" => "@timestamp,hostname,logfile,logType,msgTypeLevel,msg_ID,class,hostID,hostAddr,tid,user,ecid,rid,VirtualHost,origMessage"
			"access_log@ORACLE-HTTP" => "@timestamp,hostname,logfile,clientip,ident,auth,verb,request,httpversion,response,bytes"
		  }
		#the default timestamp format for string field @timestamp - may need to tweak to fit based on LA+logstash vesion you're using
		date_format_string => "yyyy-MM-dd'T'HH:mm:ssX"
		log_file => "/opt/scala/driver/Logstash/logs/scala_logstash.log"
		log_level => "info"
	} #end LA output
	
} #end LA output conditional	

###### DEBUGGING ###########

# show rubydebug in the console

stdout {
    codec => rubydebug
    } #end stdout
	
if "_grokparsefailure" in [tags] {
	file {
		message_format => "%{message}"
		path => "/opt/scala/driver/Logstash/logs/ORACLE-HTTP/%{type}-%{hostname}-%{logfile}-grok-debug.log"
	} # end file 
} #end conditional

} #end output